import tkinter as tk
from tkinter import *
from tkinter import ttk
from bot_functions import nltk_response, identify_similar_sentence, Person, tmt_wildcard_response, \
    random_statement_declaration, extract_name, open_conversation


# Send function
def send(args):
    print(f"{args} event has occurred")
    # Refresh the GUI
    if person.name == "unknown":
        send_string = "You ->" + entry_box.get()
    else:
        send_string = person.name + " ->" + entry_box.get()
    textview.insert(END, "\n")
    textview.insert(END, "\n" + send_string)
    textview.insert(END, "\n")

    # get text data from user
    person.user_response_string = entry_box.get().lower()
    person.user_response_string = person.user_response_string.replace(",", "")

    # get person's name to label the data
    if person.is_giving_name:
        person.name = extract_name(input_data_string=person.user_response_string)
        print(f"user gave name {person.name}")
        # username must be given to create file
        if person.name == "none":
            tmt_response = "no talking until I get your name?"
            display(response_string=tmt_response)
            return
        else:
            person.is_giving_name = False
        # retrieve and display response
        tmt_response = open_conversation()
        display(response_string=tmt_response)
        # update settings
        person.is_giving_name = False
        person.is_asking_question = False
        person.is_answering_question = True
        person.is_answering_yes_or_no = False
        person.is_making_request = False
        person.conversation_topic = "none"
        person.reference_string = "false"
        person.string_of_interest = "none"
        return

    # update textfile data for collection
    update_textfile(new_key=person.prompting_string, new_value=person.user_response_string)

    # get nltk bot responses
    nltk_bot_response = nltk_response(user_input=person.user_response_string)

    # get TMT bot response
    tmt_response = identify_similar_sentence(comparison_sentence=person.user_response_string,
                                             prior_answer=person.reference_string,
                                             name=person.name)
    if tmt_response == "I do not have enough data to answer":
        person.prompting_string = tmt_wildcard_response(user_input=person.user_response_string)
        tmt_response = person.prompting_string + "\n"
        # display results
        display(response_string=tmt_response)
        # display_nlkt_responses(response_string=nltk_bot_response)
        # update settings
        person.is_asking_question = False
        person.is_answering_question = True
        person.is_answering_yes_or_no = False
        person.is_making_request = False
        person.conversation_topic = "none"
        person.reference_string = "false"
        person.string_of_interest = "none"
        return
    else:
        state = random_statement_declaration()
        new_tmt_response = random_statement_declaration()
        tmt_response = state + new_tmt_response + "\n"
        # display results
        display(response_string=tmt_response)
        # display_nlkt_responses(response_string=nltk_bot_response)
        # update settings
        person.is_asking_question = False
        person.is_answering_question = True
        person.is_answering_yes_or_no = False
        person.is_making_request = False
        person.conversation_topic = "none"
        person.reference_string = tmt_response
        person.string_of_interest = "none"
        return


def display(response_string):
    textview.insert(END, "\n" + "TMTBot -> ", " ", response_string)
    entry_box.delete(0, END)
    textview.yview(END)
    return


def display_nlkt_responses(response_string):
    textview.insert(END, "\n" + response_string)
    textview.yview(END)
    return


# save data to make chatbot smarter
def update_textfile(new_key, new_value):
    # Append-textfile
    text_file = person.name + ".txt"
    file1 = open(text_file, "a")  # append mode
    new_text = new_key + ". \n" + new_value + ". \n"
    file1.write(new_text)
    file1.close()
    return print(f"text file updated")


# instantiate user
person = Person()
person.is_giving_name = True
person.name = "unknown"
person.prompting_string = "hi, what is your name?"
person.conversation_topic = "none"

# GUI
root = tk.Tk()
root.title("Chatbot by TMTLabs.com")
window_width = 1000
window_height = 600

# get the screen dimension
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

# find the center point
center_x = int(screen_width / 2 - window_width / 2)
center_y = int(screen_height / 2 - window_height / 2)

# set the position of the window to the center of the screen
root.geometry(f'{window_width}x{window_height}+{center_x}+{center_y}')

BG_HEADING = "yellow"
BG_COLOR = "white"
TEXT_COLOR = "black"
BUTTON_COLOR = "cyan"

FONT = ("Ariel", 15)
FONT_BOLD = ("Ariel", 20)

ttk.Label(root, background=BG_HEADING, foreground=TEXT_COLOR,
          text="Welcome to the chatroom",
          anchor=tk.CENTER, font=FONT_BOLD,
          padding=6, width=60).grid(row=0)

textview = Text(root, bg=BG_COLOR, fg=TEXT_COLOR, font=FONT, width=80)
textview.grid(row=1, column=0)
textview.insert(END, "\n" + "TMTBot -> what is your name?")
scrollbar = ttk.Scrollbar(root, orient='vertical', command=textview.yview)
scrollbar.grid(row=1, column=2, sticky=tk.NS)

#  communicate back to the scrollbar
textview['yscrollcommand'] = scrollbar.set

entry_box = Entry(root, bg=BG_COLOR, fg=TEXT_COLOR, font=FONT, width=65)
entry_box.grid(row=2, column=0)

Button(root, text="Send", font=FONT_BOLD, bg=BUTTON_COLOR,
       command=lambda: send('button clicked')).grid(row=2, column=1)
root.bind('<Return>', send)


def main():
    root.mainloop()


main()
